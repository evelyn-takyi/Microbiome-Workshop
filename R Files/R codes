### Analysis of the microbiome data in R
##### Files to upload in R
###### A. ASV count table
###### B. Taxonomy metadata 
###### C. Sample Metatable 

#### Load the following libraries
```
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install(c("DESeq2","readxl","openxlsx","vegan","ggplot2","dplyr","tidyverse","phyloseq","gridExtra","grid","ggpubr","agricolae","microbiome","MicrobeR","microbiomeSeq","apeglm"))
library(DESeq2)
library(readxl)
library(openxlsx)
library(vegan)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(phyloseq)
library(gridExtra)
library(grid)
library(ggpubr)
library(agricolae)
library(microbiome)
#library(MicrobeR)
library(pheatmap)
library("apeglm")
library(ranacapa)
library(devtools)
library(phylosmith)
library(VennDiagram)
library(UpSetR)
library(coin)
library(MicrobiotaProcess)

```
#### Load all the ASV counttables and metatable, taxonomy table and combine all into one big table in R
```
setwd("~/Desktop/microbiome/VIMS16S/mvpics/tsv/new/")
```
###### ASV Counttable
```
abund_table <-read.xlsx("~/Documents/sequence/All_data.xlsx", sheet="table", rowNames = TRUE)
abund_table<- as.data.frame(t(abund_table))
abund_table1 <- cbind(SampleID = rownames(abund_table), abund_table)
rownames(abund_table1) <- NULL
abun_count <-gather(abund_table1, FeatureID, Value, ASV_1:ASV_4155)
#add the rownames as a proper column
```
###### Metatable
```
meta_table <-read.xlsx("~/Documents/sequence/All_data.xlsx", sheet="meta_table", rowNames = TRUE)
meta_table1 <- cbind(SampleID = rownames(meta_table ), meta_table)
rownames(meta_table1 ) <- NULL
meta_table1$Treatment <- as.character(meta_table1$Treatment)
meta_table1$Treatment <- factor(meta_table1$Treatment, levels=unique(meta_table1$Treatment))
meta_table1$ProjectName <- as.character(meta_table1$ProjectName)
meta_table1$Tanksystem <- factor(meta_table1$ProjectName, levels=unique(meta_table1$ProjectName))
```
###### Read the taxonomy table
```
taxa1<-read_excel("~/Documents/sequence/All_data.xlsx", sheet = "metadata")
tax_table1 <-do.call(rbind, strsplit(as.character(taxa1$Taxon),";"))
colnames(tax_table1) <-c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
rownames(tax_table1)<-taxa1$FeatureID
taxa_A <- as.data.frame(tax_table1)
taxa_A1  <- cbind(FeatureID = rownames(taxa_A ), taxa_A)
rownames(taxa_A1) <- NULL
```
#### Convert data to a phyloseq object
```
Abund_table<- as.data.frame(t(abund_table))
A2 <-as.matrix(Abund_table)
# First we need to create a phyloseq object using our un-transformed count table
count_tab_pyA <- otu_table(A2, taxa_are_rows=T)
# Read in the taxonomy 
taxa_A2 <-taxa_A1 %>% remove_rownames %>% column_to_rownames(var="FeatureID")
taxa_A2 <-as.matrix(taxa_A2)
tax_tab_phy <- tax_table(taxa_A2)
# Read in the metatable
meta_table2 <-Meta_T %>% remove_rownames %>% column_to_rownames(var="SampleID")
sample_info_tab_phy <- sample_data(meta_table2)
All_S4 <-phyloseq(count_tab_pyA, tax_tab_phy, sample_info_tab_phy)
All_S4
```
#### Remove any taxa associated with chloroplast and mitochondria
```
justbacteria <- All_S4_prune %>%
  subset_taxa(
    Kingdom == "Bacteria" &                   
      Family  != "mitochondria" &           
      Class   != "Chloroplast" &
      Order   != "mitochondria" &
      Order   != "Chloroplast"
  )
```

#### Join all the data together into a one file
```
sample_sum_df <- data.frame(sum = sample_sums(justbacteria ))
sum(sample_sum_df[, 'sum'])
Sample_reads <- cbind(SampleID = rownames(sample_sum_df), sample_sum_df)
rownames(Sample_reads) <- NULL
#Join all the data
Meta_T <-full_join(meta_table1, Sample_reads)
M1count<-full_join(taxa_A1, abun_count)
combine_b <-full_join(M1count,Meta_T)
All_samples <- combine_b%>% group_by(SampleID,Order,Treatment)%>%summarise(avg_abundance = mean(sum))
```
#### Basic Statistics
```
newdata <-combine_b %>% group_by(SampleID,FeatureID) %>% summarise(Value=mean(Value))
newdata1 <-spread(newdata, SampleID, Value) ##spread the data into a wide format
x<-dim(newdata1)[2] # number of columns
newdata1[2:x] <- lapply(newdata1[2:x], function(x) as.numeric(as.character(x)))
```

#### Get basic stats and generate a table called "dataset_info"
```
seq_total<-apply(newdata1[2:x],2,sum) #number of sequences per sample
ASV_count<-colSums(newdata1[2:x]>0) # OTUs per sample
ASV_single<-colSums(newdata1[2:x]==1) # OTUs with only 1 seq
ASV_double<-colSums(newdata1[2:x]==2) # OTUs that have only 2 seqs
ASV_true<-colSums(newdata1[2:x]>2) # Number of OTUs with >2 seqs
dataset_info<-data.frame(seq_total,ASV_count)
#add the rownames as a proper column
dataset_info <- cbind(SampleID = rownames(dataset_info), dataset_info)
dataset_info
rownames(dataset_info) <- NULL
#combine the metadata with dataset_info
data_meta <- meta_table1 [c(1,2,4)]
basic_stat <- full_join(data_meta, dataset_info)
basic_stat
#write.csv(basic_stat,"basic_stat.csv")
``` 
#### Subset data by larvae
```
phy <- subset_samples(justbacteria, Sym=="Y")
phy <- subset_samples(justbacteria, All=="IN")
Table1 <- otu_table(phy)
SD <- sample_data(phy) %>%
    data.frame() %>%
    select("Treatment","Hatchery", "Year","Month","Season","season","ProjectName", "Num","Type", "Name","All","TankLocation","Location","Env") %>%
    mutate_if(is.factor,as.character)
SD1 <- cbind(SampleID = rownames(SD ), SD)
rownames(SD1 ) <- NULL
sample_sum_df <- data.frame(sum = sample_sums(ps2 ))
sum(sample_sum_df[, 'sum'])
```
#### Data Filtering
##### Step1. Evaluate Amplicon Sequence Variants (ASV) summary statistics
#####  Remove taxa with zero counts 
```
summary(taxa_sums(justbacteria))
phy <- prune_taxa(taxa_sums(justbacteria) > 0, justbacteria)
```
#### Step2. Factor reordering and renaming
##### Reorder Trials
```
levels(sample_data(phy)$Trial)
sample_data(phy)$Trial <- factor(sample_data(phy)$Trial, levels = c("T6","T8"))
levels(sample_data(phy)$Trial)

# Relabel Water Type
sample_data(phy)$Water <- factor(sample_data(phy)$Water, labels = c("T6NUV","T6UV","T8NUV","T8UV"))
levels(sample_data(phy)$Water)

# Reorder Hatchery labels
levels(sample_data(phy)$Hatchery)
sample_data(phy)$Hatchery <- factor(sample_data(phy)$Hatchery, levels = c("MOOK", "RWU"))
levels(sample_data(phy)$Hatchery)

# Create a new data frame of the sorted row sums, a column of sorted values from 1 to the total number of individuals/counts for each ASV and a categorical variable stating these are all ASVs.
readsumsdf <- data.frame(nreads = sort(taxa_sums(phy), decreasing = TRUE), 
                        sorted = 1:ntaxa(phy), type = "ASVs")
# Make a data frame with a column for the read counts of each sample for histogram production
sample_sum_df <- data.frame(sum = sample_sums(phy))
```

#### Step3. Make plots for number of reads
###### Generates a bar plot with # of reads (y-axis) for each taxa. Sorted from most to least abundant
```
p.reads = ggplot(readsumsdf, aes(x = sorted, y = nreads)) +
  geom_bar(stat = "identity") +
  ggtitle("ASV Assessment") +
  scale_y_log10() +
  facet_wrap(~type, scales = "free") +
  ylab("# of Sequences")
 ``` 
###### Generates a second bar plot with # of reads (y-axis) per sample at various read depths. Sorted from most to least
```
p.reads.hist <- ggplot(sample_sum_df, aes(x = sum)) + 
  geom_histogram(color = "black", fill = "firebrick3", binwidth = 150) +
  ggtitle("Distribution of sample sequencing depth") + 
  xlab("Read counts") +
  ylab("# of Samples")
# Final plot, side-by-side
grid.arrange(p.reads, p.reads.hist, ncol = 2)
```

#### Step 4: Detect and remove outlier samples
##### Format a data table to combine sample summary data with sample variable data
```
ss <- sample_sums(phy)
sd <- as.data.frame(sample_data(phy))
ss.df <- merge(sd, data.frame("ASV" = ss), by ="row.names")
# Plot the data by the treatment variable
y = 10000 # Set a threshold for the minimum number of acceptable reads. 
x = "SampleName" # Set the x-axis variable you want to examine
label = "Row.names" # This is the label you want to overlay on the points
p.ss.boxplot <- ggplot(ss.df, aes_string(x, y = "ASV", color = "Treatment")) + 
  geom_boxplot(outlier.colour="NA", position = position_dodge(width = 0.8)) +
  geom_jitter(size = 2, alpha = 0.6) +
  scale_y_log10() +
  facet_wrap(~Water) +
  geom_hline(yintercept = y, lty = 2) +
  geom_text(aes_string(label = label), size = 3, nudge_y = 0.05, nudge_x = 0.05)
p.ss.boxplot
```
###### Remove samples that are outliers
```
nsamples(phy)
ps1 <- phy2 %>% subset_samples(SampleName != "VIMS4_S4A_3" & SampleName != "UVL_S4A_3"& SampleName != "VIMS1_CONA_1")
nsamples(ps1)
```

#### Step 5: Taxon cleaning
###### The following R chunk removes taxa not-typically part of a bacterial microbiome analysis.
```
get_taxa_unique(phy, "Kingdom")
get_taxa_unique(phy, "Class")
phy # Check the number of taxa prior to removal
ntaxa(phy)
ps2 <- phy %>%
  subset_taxa(
    Kingdom == "Bacteria" &
    Family  != "mitochondria" &
    Class   != "Chloroplast" &
    Phylum != "Cyanobacteria/Chloroplast"
  )
ps2 # Confirm that the taxa were removed
get_taxa_unique(ps2, "Kingdom")
get_taxa_unique(ps2, "Class")
get_taxa_unique(ps2, "Phylum")
```
#### Step 6: Data Subsetting
###### All samples
```
ntaxa(ps2)
ps2 <- prune_taxa(taxa_sums(ps2) > 0, ps2)
ntaxa(ps2)
# Trial1
ps2.T1 <- subset_samples(ps2, ProjectName == "T1")
any(taxa_sums(ps2.T1) == 0) # In this case it is TRUE, so remove the zero's
ps2.T1 <- prune_taxa(taxa_sums(ps2.T1) > 0, ps2.T1)
any(taxa_sums(ps2.T1) == 0) # It should now be false
# Trial2
ps2.T2 <- subset_samples(ps2, ProjectName == "T2")
any(taxa_sums(ps2.T2) == 0) # In this case it is TRUE, so remove the zero's
ps2.T2 <- prune_taxa(taxa_sums(ps2.T2) > 0, ps2.T2)
any(taxa_sums(ps2.T2) == 0) # It should now be false
# Trial3
ps2.T3 <- subset_samples(ps2, ProjectName == "T3")
any(taxa_sums(ps2.T3) == 0) # In this case it is TRUE, so remove the zero's
ps2.T3 <- prune_taxa(taxa_sums(ps2.T3) > 0, ps2.T3)
any(taxa_sums(ps2.T3) == 0) # It should now be false
# Trial4
ps2.T4 <- subset_samples(ps2, ProjectName == "T4")
any(taxa_sums(ps2.T4) == 0) # In this case it is TRUE, so remove the zero's
ps2.T4 <- prune_taxa(taxa_sums(ps2.T4) > 0, ps2.T4)
any(taxa_sums(ps2.T4) == 0) # It should now be false
# Trial5
ps2.T5 <- subset_samples(ps2, ProjectName == "T5")
any(taxa_sums(ps2.T5) == 0) # In this case it is TRUE, so remove the zero's
ps2.T5 <- prune_taxa(taxa_sums(ps2.T5) > 0, ps2.T5)
any(taxa_sums(ps2.T5) == 0) # It should now be false
# Trial6
ps2.T6 <- subset_samples(ps2, Name == "T6")
any(taxa_sums(ps2.T6) == 0) # In this case it is TRUE, so remove the zero's
ps2.T6 <- prune_taxa(taxa_sums(ps2.T6) > 0, ps2.T6)
any(taxa_sums(ps2.T6) == 0) # It should now be false
# Trial7
ps2.T7 <- subset_samples(ps2, Name == "T7")
any(taxa_sums(ps2.T7) == 0) # In this case it is TRUE, so remove the zero's
ps2.T7 <- prune_taxa(taxa_sums(ps2.T7) > 0, ps2.T7)
any(taxa_sums(ps2.T7) == 0) # It should now be false
# Trial8
ps2.T8 <- subset_samples(ps2, Name == "T8NUV")
any(taxa_sums(ps2.T8) == 0) # In this case it is TRUE, so remove the zero's
ps2.T8 <- prune_taxa(taxa_sums(ps2.T8) > 0, ps2.T8)
any(taxa_sums(ps2.T8) == 0) # It should now be false
```
###### Taxa Prevalence estimation
```
# Calculate ASVs  prevalence across the data set
prevdf <- apply(X = otu_table(ps2),MARGIN = ifelse(taxa_are_rows(ps2), yes = 1, no = 2),FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to prevdf
prevdf <- data.frame(Prevalence = prevdf, TotalAbundance = taxa_sums(ps2), tax_table(ps2))
```
###### Taxa Prevalence plot
```
prevdf1 <- subset(prevdf, Phylum %in% get_taxa_unique(ps2, "Phylum"))
p.prevdf1 <- ggplot(prevdf1, aes(TotalAbundance, Prevalence / nsamples(ps2),color=Family)) +
geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) +
geom_point(size = 3, alpha = 0.7) +
scale_x_log10() +
xlab("Total Abundance") + ylab("Prevalence [Frac. Samples]") +
facet_wrap(~Phylum) +
theme(legend.position="none") +
 ggtitle("Phylum Prevalence in All Samples\nColored by Family")
p.prevdf1
```	
	
#### Data transformations methods and plots
###### Transform to Relative abundances
```
ps2.ra <- transform_sample_counts(ps2, function(OTU) OTU/sum(OTU))
```
###### Log transformation 
```
ps2.log <- transform_sample_counts(ps2, function(x) log(1 + x))
```
###### Histograms of the non-transformed data vs. the transformed data can address the shift to normality
```
p.no.log <- qplot(rowSums(otu_table(ps2))) + ggtitle("Raw Counts") +
  theme_bw() +
  xlab("Row Sum") +
  ylab("# of Samples")
p.log <- qplot(log10(rowSums(otu_table(ps2)))) +
  ggtitle("log10 transformed counts") +
  theme_bw() +
  xlab("Row Sum") +
  ylab("# of Samples")
ggarrange(p.no.log, p.log, ncol = 2, labels = c("A)", "B)"))
```
#### Rarefaction plot
##### We can plot the rarefaction curve for the observed ASVs in the entire data set. This is a way to check how has the richness captured in the sequencing effort.
```
Raf <-ggrare(ps2, step = 50, color="Trial",  se = TRUE)
```
### Alpha diversity
###### Alpha diversity is a standard tool researchers can use to calculate the number of bacterial taxa present in a study or study group and the relationships between relative abundance and how evenly taxa are distributed. These are classic representations of species number and diversity in a study which provide useful summary information about the numbers and relative abundances of bacterial taxa within your study.
```
SD <- sample_data(ps2) %>%
    data.frame() %>%
    select("Treatment","ProjectName", "Num","Type", "Name","Hatchery","Location","season","Year","Month","Season","TankLocation") %>%
    mutate_if(is.factor,as.character)
SD1 <- cbind(SampleID = rownames(SD ), SD)
rownames(SD1 ) <- NULL
All_S4_prune_rarefy <- rarefy_even_depth(ps2, rngseed= 81, sample.size = 10000)
#Table1 <- otu_table(ps2)
adiv <- data.frame(
  "Observed" = phyloseq::estimate_richness(All_S4_prune_rarefy, measures = "Observed"),
  "Shannon" = phyloseq::estimate_richness(All_S4_prune_rarefy, measures = "Shannon"),
  "Simpson" = phyloseq::estimate_richness(All_S4_prune_rarefy, measures = "Simpson"),
  "Chao1"= phyloseq::estimate_richness(All_S4_prune_rarefy, measures = "Chao1"),
  "Status" = phyloseq::sample_data(All_S4_prune_rarefy)$Treatment)
head(adiv)
adiv$ProjectName <- SD$ProjectName
adiv$Treatment <- SD$Treatment
adiv$Name <- SD$Name
adiv$Num <- SD$Num
adiv$Hatchery <- SD$Hatchery
adiv$Season <- SD$Season
adiv$Month <- SD$Month
adiv$Year <- SD$Year
adiv$TankLocation <- SD$TankLocation
adiv$Status <-as.character(adiv$Status)
newSTorder = c("Control",  "S4")
sample_types <- c("Control", "S4")
sample_labels <- c("C", "S4")
adiv$Hatchery <- factor(adiv$Hatchery, levels=c("VIMS","Mat","MOOK","RWU"))
adiv$ProjectName <- factor(adiv$ProjectName, levels=c("T1","T2","T3","T4","T5","T6","T7","T8"))
```
##### Simpson diversity
```
Div_SIM <- ggplot(adiv, aes(as.factor(Name), Simpson)) +
  facet_grid(.~Hatchery, scales="free",space="free_x",switch="y")+
  geom_boxplot(aes(fill=factor(Treatment)),width=0.5)+
  #geom_signif(comparisons = list(c("A", "B"), c("B","C")),
              #map_signif_level=TRUE)+
  scale_fill_manual(values=c("blue", "orange","blue", "orange")) +
  labs(y="Simpson's Diversity", x="Trial", fill="Treatment")+theme_bw()+
  theme(strip.text.x = element_text(size=12,face="bold"))+
  theme(strip.background = element_rect(fill="gray85"))+
  theme(axis.text.y = element_text(size="14", color="black"), axis.title.y = element_text(face="bold",size="14", color="black"))+theme(axis.text.x = element_text(size="12", color="black", angle = 45), axis.title.x.bottom = element_text(face="bold",size="14", color="black"))+theme(axis.text.x.top= element_text(face="bold",size="14", color="black"),
        legend.position = "bottom",panel.spacing = unit(0.2, "mm"),               
        panel.border = element_rect(colour="grey"))+
  scale_y_continuous(limits=c(0,1))
Div_SIM
## Statistics
Simp.aov <- aov(Simpson ~ ProjectName:Treatment+ProjectName+Treatment, data = adiv)
summary(Simp.aov)
TukeyHSD(Simp.aov)
tukey_Trial2 <-HSD.test(Simp.aov, "ProjectName", group = TRUE)
tukey_Trial2
kruskal.test(Simpson ~ ProjectName, data=adiv)
```
##### Richness
```
Div_rich <- ggplot(adiv, aes(as.factor(ProjectName), Chao1.Chao1)) +
  facet_grid(.~Hatchery, scales="free",space="free_x",switch="y")+
  geom_boxplot(aes(fill=factor(Treatment)),width=0.5)+
  #geom_signif(comparisons = list(c("A", "B"), c("B","C")),
              #map_signif_level=TRUE)+
  scale_fill_manual(values=c("blue", "orange","blue", "orange")) +
  labs(y="Chao1 Richness", x="Trial", fill="Treatment")+theme_bw()+
  theme(strip.text.x = element_text(size=12,face="bold"))+
  theme(strip.background = element_rect(fill="gray85"))+
  theme(axis.text.y = element_text(size="14", color="black"), axis.title.y = element_text(face="bold",size="14", color="black"))+theme(axis.text.x = element_text(size="14", color="black", angle = 45), axis.title.x.bottom = element_text(face="bold",size="14", color="black"))+theme(axis.text.x.top= element_text(face="bold",size="14", color="black"),
        legend.position = "bottom",panel.spacing = unit(0.2, "mm"),               
        panel.border = element_rect(colour="grey"))+
  scale_y_continuous(limits=c(0,300))
Div_rich
##Statistics
Rich.aov <- aov(Chao1.Chao1 ~ ProjectName:Treatment+ProjectName, data = adiv)
summary(Rich.aov)
tukey_Trial2 <-HSD.test(Rich.aov, "ProjectName", group = TRUE)
TukeyHSD(Rich.aov)
tukey_Trial2
kruskal.test(Chao1.Chao1 ~ Treatment, data=adiv)
kruskal.test(Chao1.Chao1 ~ ProjectName, data=adiv)
```
#### Shared and unique ASVs across samples
##### By Trial
```
ps2A <- prune_taxa(taxa_sums(ps2) > 0, ps2)
upsetda <- get_upset(obj=ps2A, factorNames="ProjectName")
U <- upset(upsetda, sets = c("T1", "T2", "T3", "T4", "T5", 
    "T6", "T7", "T8"), sets.bar.color = "#56B4E9",
      order.by = "freq", keep.order = TRUE, queries = list(list(query = intersects, params = list("T1", "T2", "T3", "T4", "T5", 
    "T6", "T7", "T8"), color = "orange", active = T),
      empty.intersections = "on",group.by = "sets", cutoff = 5))
upset(upsetda, sets.bar.color = "darkblue",nintersects = 50, sets = c("T1", "T2", "T3", "T4", "T5","T6", "T7", "T8"), queries = list(list(query = intersects, params = list("T1", "T2", "T3", "T4", "T5", 
    "T6", "T7", "T8"), color = "orange", active = T)),order.by = "freq", empty.intersections = "on",keep.order = TRUE,number.angles = 0, point.size = 2.5,line.size = 1, mb.ratio = c(0.55, 0.45),
    
mainbar.y.label = "ASVs Intersections", sets.x.label = "Total number of ASV per trial",text.scale = c(2.2, 2, 1.3, 1.5, 1.7, 1.3))
```  
##### By Treatment   
```   
upsetda <- get_upset(obj=ps2A, factorNames="Treatment")
U <- upset(upsetda, sets = c("S4", "C"), sets.bar.color = "#56B4E9",
      order.by = "freq", keep.order = TRUE,
      empty.intersections = "on",group.by = "sets", cutoff = 5)
upset(upsetda, sets.bar.color = "darkblue",nintersects = 40, sets = c("S4", "C"),order.by = "freq", empty.intersections = "on",keep.order = TRUE,number.angles = 0, point.size = 3.5,line.size = 1, 
    mainbar.y.label = "ASVs Intersections", sets.x.label = "ASV Per treatment in all trials",text.scale = c(2.2, 2, 1.5, 1.4, 2.7, 2.5))
```

#### NMDS Plot

###### Log transformation moves to a more normal distribution
```
#GPA1 <- ps2 %>% transform_sample_counts(function(x) log(1 + x))%>% psmelt()
all_order <- GPA1 %>%group_by(Sample,OTU)%>%summarise(avg_abundance = mean(Abundance))
Oder <-spread(all_order, Sample,avg_abundance) ##spread the data into a wide format
Order <-Oder %>% remove_rownames %>% column_to_rownames(var="OTU")
Abun <- as.data.frame(t(Order)) 
SD 
```
##### By Hatchery
```
sol_t1 <-metaMDS(Abun ,distance = "bray", k = 2, trymax = 50)
NMDS_t1=data.frame(NMDS1=sol_t1$point[,1],NMDS2=sol_t1$point[,2],
          Treatment=as.factor(SD[,1]),Hatchery=as.factor(SD[,6]))

veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100) 
{
  theta <- (0:npoints) * 2 * pi/npoints
  Circle <- cbind(cos(theta), sin(theta))
  t(center + scale * t(Circle %*% chol(cov)))
}
# define shapes for plots
shape_values<-seq(1,11)
# set theme for following plots
theme_set(theme_gray())
plot.new()
ord_t1<-ordiellipse(sol_t1, as.factor(SD$Hatchery),
                    display = "sites", kind ="sd", conf = 0.95, label = T)
dev.off()
#Generate ellipse points based on 95% confidence (SD) intervals
df_ell_t1 <- data.frame()
for(g in levels(NMDS_t1$Hatchery)){
  if(g!="" && (g %in% names(ord_t1))){
    df_ell_t1 <- rbind(df_ell_t1,
    cbind(as.data.frame(with(NMDS_t1[NMDS_t1$Hatchery==g,], veganCovEllipse(ord_t1[[g]]$cov,ord_t1[[g]]$center,ord_t1[[g]]$scale))),Hatchery=g))}}
#Store the center of the ellipses (mean NMDS)
NMDS.mean_t1=aggregate(NMDS_t1[,1:2],list(group=NMDS_t1$Hatchery),mean)
#Calculate p-value:
adon_t1<-adonis2(Abun ~Hatchery, data=SD, by=NULL,method="bray", k=2)
#Plot NMDS
NMDS_t1 <- cbind(SampleID = rownames(NMDS_t1 ), NMDS_t1)
rownames(SD1 ) <- NULL
NMDSplot_t3<-ggplot(data=NMDS_t1,aes(NMDS1,NMDS2,col=Hatchery))+
  #geom_text(data=NMDS_t1,aes(NMDS1,NMDS2,label=SampleID),size=3,vjust=0)+
  # label the middle of the ellipses with the name of the grouping factor
 # annotate("text",x=NMDS.mean_t1$x,y=NMDS.mean_t1$y,
          # label=NMDS.mean_t1$group,size=5)+
  # add the p-value in the bottom right corner
  annotate("text",x=min(NMDS_t1$NMDS1),y=min(NMDS_t1$NMDS2-0.5),
           label=paste("p= ", adon_t1$`Pr(>F)`[1]),size=3)+
  # draw the ellipses. define color based on the grouping factor
  geom_path(data=df_ell_t1, aes(x=NMDS1, y=NMDS2, linetype=Hatchery), size=1)+
  scale_linetype_manual(values=c("VIMS"="solid", "MOOK"="longdash","Mat"="dotdash","RWU"="dashed"))+
  scale_colour_manual(values=c("VIMS"="gold2", "MOOK"="hotpink4","Mat"="cyan","RWU"="darksalmon"))+
  ggtitle("By Hatchery")+
  # add the points per sample. define shape based on Day
  geom_point(aes(shape=Treatment), size=3) + scale_shape_manual(values=c(15,16)) +
  # reorder the legend
  guides(color = guide_legend(order=1),lty= guide_legend(order=1),
         shape = guide_legend(order=2), legend.position = "NONE")
NMDSplot_Hatchery <- NMDSplot_t3 + theme(axis.text.y = element_text(size="12", color="black"), axis.title.y = element_text(face="bold",size="12", color="black"))+
theme(axis.text.x = element_text(size="12", color="black"), axis.title.x.bottom = element_text(face="bold",size="12", color="black"))+
theme(axis.text.x.top= element_text(face="bold",size="12", color="black"))+theme(plot.title=element_text(size = 16, face = "bold", hjust = 0.5))
NMDSplot_Hatchery
```
